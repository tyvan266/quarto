{
  "hash": "a65a9cf4291045498b8aa3fffd18d67c",
  "result": {
    "markdown": "---\ntitle: 'Overlapping intervals'\ndate: '2023-10-26'\ndescription: 'Case study with map' \nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\ncode-annotations: true\ntoc: true\ntoc-depth: 3\n---\n\n\n# The Puzzle \n\nThe overlapping intervals puzzle is similar in spirit to the overlapping date ranges problem, and structurally like the **gaps and islands** problem. (link to previous post)\n\nWe can think of it as a variant of the same problem. Here, instead of using proper *date types*, we will work with integers to represent intervals, or start and end markers. \n\nOur solution will use the `map` function, introduced in (previous post). Here we also add a new extension, before we used `map` in the context of single list of input values, where essentially we wanted to iterate it through a function parameterized by one argument. Now we consider `map2_dbl` (and its variants) where we want to use multiple lists of input values to be used simultaneously \n\nApplications are also similar in spirit. Consider for example, intervals representing medication start and end. \n\nUnlike the gaps and islands, we add one new wrinkle: a *type* field that distinguishes between different intervals. We can think as different medication drugs. Then, one application is now checking for concomittant use, or overlapping use. \n\nOther applications might include: \n\n* overlapping diseases or medical conditions \n\n* overlapping stays or visits or other events generally \n\n* overlapping service or programs \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\ndemo_data <- \n  tribble(\n    ~ \"ID\", ~ \"Begin\", ~ \"End\", ~ \"Type\",\n       1      ,12       , 18     ,\"A\"   ,\n       1      ,20       , 25     ,\"B\"   ,\n       1      ,23       , 30     ,\"C\"   ,\n       2      ,7        , 13     ,\"A\"   ,\n       2      ,12       , 20     ,\"B\"   ,\n       3      ,18       , 28     ,\"A\"   ,\n       3      ,20       , 33     ,\"B\"   ,\n       3      ,31       , 42     ,\"C\"   ,\n       3      ,44       , 50     ,\"D\"   ,\n       4      ,10       , 25     ,\"A\"   ,\n       4      ,15       , 19     ,\"B\"   ,\n       4      ,21       , 30     ,\"C\"   ,\n       5      ,3        , 8      ,\"A\"   ,\n       5      ,7        , 15     ,\"B\"   ,\n       5      ,13       , 22     ,\"C\"   ,\n       5      ,19       , 26     ,\"D\"   ,\n       5      ,25       , 33     ,\"E\"\n  ) |> \n  mutate(ID = factor(ID))\n```\n:::\n\n\nSimilar interval range data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(\n  demo_data |> \n  group_by(ID) |> \n  mutate(y = row_number())\n  , aes(y=y, color=Type)) +\n  \n  geom_linerange(\n    aes(xmin = Begin, xmax = End, y=y)\n    , linewidth = 2\n  ) + \n  \n  #geom_point(aes(x = Begin, y = 0, label = Type)) + \n  \n  scale_color_brewer(palette = \"Set1\") + \n  \n  xlab(\"Begin/ End\") + ylab(\"ID Panels\") +\n  scale_x_continuous(breaks = seq(0,50,5)) + \n\n  theme_bw() +\n  \n  geom_label(\n    aes(x = Begin, y=y, label = Type, group = ID)\n    , position = position_nudge(y = .5) \n    , size = 8\n  ) +\n  \n  facet_wrap(. ~ ID, scale = 'free_y') + \n  \n  theme(\n    axis.text.x = element_text(size = 16, angle = 45),\n    axis.text.y = element_blank(),\n    strip.text = element_text(size = 18), \n    axis.title.x = element_text(size = 24),\n    axis.title.y = element_text(size = 24)\n    , legend.position = 'none'\n  )\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-2-1.png){width=1440}\n:::\n:::\n\n\n# Solution using map\n\nFor each interval, we loop through their `Start` and `End` and subset the intervals from `Type` list that satisfying the corresponding conditions on *their* starts and ends.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo_data |> \n  group_by(ID) |> \n  arrange(ID, Begin) |> \n  mutate(\n    findOverlaps = \n      map2_chr(Begin, End, \\(.x, .y) str_c(Type[!(.x >= End | .y <= Begin)], collapse = \" & \"))\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 Ã— 5\n# Groups:   ID [5]\n   ID    Begin   End Type  findOverlaps\n   <fct> <dbl> <dbl> <chr> <chr>       \n 1 1        12    18 A     A           \n 2 1        20    25 B     B & C       \n 3 1        23    30 C     B & C       \n 4 2         7    13 A     A & B       \n 5 2        12    20 B     A & B       \n 6 3        18    28 A     A & B       \n 7 3        20    33 B     A & B & C   \n 8 3        31    42 C     B & C       \n 9 3        44    50 D     D           \n10 4        10    25 A     A & B & C   \n11 4        15    19 B     A & B       \n12 4        21    30 C     A & C       \n13 5         3     8 A     A & B       \n14 5         7    15 B     A & B & C   \n15 5        13    22 C     B & C & D   \n16 5        19    26 D     C & D & E   \n17 5        25    33 E     D & E       \n```\n:::\n:::\n",
    "supporting": [
      "post_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}